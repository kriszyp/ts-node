{"version":3,"file":"bin.js","sourceRoot":"","sources":["../src/bin.ts"],"names":[],"mappings":";;;AAEA,+CAAqC;AACrC,6BAA2B;AAC3B,iCAAmC;AAEnC,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AAElC,OAAO,CAAC,UAAU,GAAG,EAAE,OAAO;IAC5B,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACR,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QACxB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACf,MAAM,CAAA;IACR,CAAC;IAED,IAAM,QAAQ,GAAa,EAAE,CAAA;IAC7B,IAAM,UAAU,GAAa,EAAE,CAAA;IAE/B,IAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;QAChC,OAAO;QACP,SAAS;QACT,SAAS;QACT,aAAa;QACb,WAAW;QACX,eAAe;QACf,UAAU;QACV,kBAAkB;QAClB,oBAAoB;QACpB,qBAAqB;QACrB,qBAAqB;QACrB,wBAAwB;QACxB,mBAAmB;QACnB,qBAAqB;QACrB,aAAa;QACb,gBAAgB;KACjB,CAAC,CAAA;IAEF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACrC,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;QACnB,IAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAEjC,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QACpB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YAEN,UAAU,CAAC,IAAI,OAAf,UAAU,EAAS,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAC;YACjC,KAAK,CAAA;QACP,CAAC;IACH,CAAC;IAED,IAAM,IAAI,GAAG,qBAAK,CAChB,OAAO,CAAC,QAAQ,EAChB,QAAQ,CAAC,MAAM,CAAC,WAAI,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,UAAU,CAAC,EACvD,EAAE,KAAK,EAAE,SAAS,EAAE,CACrB,CAAA;IAED,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,IAAY,EAAE,MAAc;QACpD,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE;YACjB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;YACnC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACpB,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { spawn } from 'child_process'\r\nimport { join } from 'path'\r\nimport v8flags = require('v8flags')\r\n\r\nconst argv = process.argv.slice(2)\r\n\r\nv8flags(function (err, v8flags) {\r\n  if (err) {\r\n    console.error(err.stack)\r\n    process.exit(1)\r\n    return\r\n  }\r\n\r\n  const nodeArgs: string[] = []\r\n  const scriptArgs: string[] = []\r\n\r\n  const knownFlags = v8flags.concat([\r\n    'debug',\r\n    'inspect',\r\n    '--debug',\r\n    '--debug-brk',\r\n    '--inspect',\r\n    '--inspect-brk',\r\n    '--nolazy',\r\n    '--no-deprecation',\r\n    '--log-timer-events',\r\n    '--throw-deprecation',\r\n    '--trace-deprecation',\r\n    '--allow-natives-syntax',\r\n    '--perf-basic-prof',\r\n    '--preserve-symlinks',\r\n    '--expose-gc',\r\n    '--expose-http2'\r\n  ])\r\n\r\n  for (let i = 0; i < argv.length; i++) {\r\n    const arg = argv[i]\r\n    const flag = arg.split('=', 1)[0]\r\n\r\n    if (knownFlags.indexOf(flag) > -1) {\r\n      nodeArgs.push(arg)\r\n    } else if (/^-/.test(flag)) {\r\n      scriptArgs.push(arg)\r\n    } else {\r\n      // Break when we encounter a \"script\".\r\n      scriptArgs.push(...argv.slice(i))\r\n      break\r\n    }\r\n  }\r\n\r\n  const proc = spawn(\r\n    process.execPath,\r\n    nodeArgs.concat(join(__dirname, '_bin.js'), scriptArgs),\r\n    { stdio: 'inherit' }\r\n  )\r\n\r\n  proc.on('exit', function (code: number, signal: string) {\r\n    process.on('exit', function () {\r\n      if (signal) {\r\n        process.kill(process.pid, signal)\r\n      } else {\r\n        process.exit(code)\r\n      }\r\n    })\r\n  })\r\n})\r\n"]}