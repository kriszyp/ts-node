{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { relative, basename, extname, resolve, dirname, join } from 'path'\r\nimport { writeFileSync, readFileSync, statSync } from 'fs'\r\nimport { EOL, tmpdir, homedir } from 'os'\r\nimport sourceMapSupport = require('source-map-support')\r\nimport chalk = require('chalk')\r\nimport mkdirp = require('mkdirp')\r\nimport crypto = require('crypto')\r\nimport yn = require('yn')\r\nimport arrify = require('arrify')\r\nimport { BaseError } from 'make-error'\r\nimport * as TS from 'typescript'\r\nimport { loadSync } from 'tsconfig'\r\n\r\nconst pkg = require('../package.json')\r\nconst shouldDebug = yn(process.env.TS_NODE_DEBUG)\r\nconst debug = shouldDebug ? console.log.bind(console, 'ts-node') : () => undefined\r\nconst debugFn = shouldDebug ?\r\n  <T, U> (key: string, fn: (arg: T) => U) => {\r\n    return (x: T) => {\r\n      debug(key, x)\r\n      return fn(x)\r\n    }\r\n  } :\r\n  <T, U> (_: string, fn: (arg: T) => U) => fn\r\n\r\n/**\r\n * Common TypeScript interfaces between versions.\r\n */\r\nexport interface TSCommon {\r\n  version: typeof TS.version\r\n  sys: typeof TS.sys\r\n  ScriptSnapshot: typeof TS.ScriptSnapshot\r\n  displayPartsToString: typeof TS.displayPartsToString\r\n  createLanguageService: typeof TS.createLanguageService\r\n  getDefaultLibFilePath: typeof TS.getDefaultLibFilePath\r\n  getPreEmitDiagnostics: typeof TS.getPreEmitDiagnostics\r\n  flattenDiagnosticMessageText: typeof TS.flattenDiagnosticMessageText\r\n  transpileModule: typeof TS.transpileModule\r\n  ModuleKind: typeof TS.ModuleKind\r\n  ScriptTarget: typeof TS.ScriptTarget\r\n  findConfigFile: typeof TS.findConfigFile\r\n  readConfigFile: typeof TS.readConfigFile\r\n  parseJsonConfigFileContent: typeof TS.parseJsonConfigFileContent\r\n\r\n  // TypeScript 1.5 and 1.6.\r\n  parseConfigFile? (json: any, host: any, basePath: string): any\r\n}\r\n\r\n/**\r\n * Export the current version.\r\n */\r\nexport const VERSION = pkg.version\r\n\r\n/**\r\n * Registration options.\r\n */\r\nexport interface Options {\r\n  typeCheck?: boolean | null\r\n  cache?: boolean | null\r\n  cacheDirectory?: string\r\n  compiler?: string\r\n  project?: boolean | string\r\n  ignore?: boolean | string | string[]\r\n  ignoreWarnings?: number | string | Array<number | string>\r\n  getFile?: (path: string) => string\r\n  fileExists?: (path: string) => boolean\r\n  compilerOptions?: any\r\n  transformers?: TS.CustomTransformers\r\n}\r\n\r\n/**\r\n * Track the project information.\r\n */\r\ninterface Cache {\r\n  contents: { [path: string]: string }\r\n  versions: { [path: string]: number }\r\n  outputs: { [path: string]: string }\r\n}\r\n\r\n/**\r\n * Information retrieved from type info check.\r\n */\r\nexport interface TypeInfo {\r\n  name: string\r\n  comment: string\r\n}\r\n\r\n/**\r\n * Default register options.\r\n */\r\nconst DEFAULTS = {\r\n  getFile,\r\n  fileExists,\r\n  cache: yn(process.env['TS_NODE_CACHE'], { default: true }),\r\n  cacheDirectory: process.env['TS_NODE_CACHE_DIRECTORY'],\r\n  compiler: process.env['TS_NODE_COMPILER'],\r\n  compilerOptions: parse(process.env['TS_NODE_COMPILER_OPTIONS']),\r\n  project: process.env['TS_NODE_PROJECT'],\r\n  ignore: split(process.env['TS_NODE_IGNORE']),\r\n  ignoreWarnings: split(process.env['TS_NODE_IGNORE_WARNINGS']),\r\n  typeCheck: yn(process.env['TS_NODE_TYPE_CHECK'])\r\n}\r\n\r\n/**\r\n * Split a string array of values.\r\n */\r\nexport function split (value: string | undefined) {\r\n  return value ? value.split(/ *, */g) : undefined\r\n}\r\n\r\n/**\r\n * Parse a string as JSON.\r\n */\r\nexport function parse (value: string | undefined) {\r\n  return value ? JSON.parse(value) : undefined\r\n}\r\n\r\n/**\r\n * Replace backslashes with forward slashes.\r\n */\r\nexport function normalizeSlashes (value: string): string {\r\n  return value.replace(/\\\\/g, '/')\r\n}\r\n\r\n/**\r\n * TypeScript diagnostics error.\r\n */\r\nexport class TSError extends BaseError {\r\n\r\n  name = 'TSError'\r\n\r\n  constructor (public diagnostics: TSDiagnostic[]) {\r\n    super(\r\n      `⨯ Unable to compile TypeScript\\n${diagnostics.map(x => x.message).join('\\n')}`\r\n    )\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Return type for registering `ts-node`.\r\n */\r\nexport interface Register {\r\n  cwd: string\r\n  extensions: string[]\r\n  cachedir: string\r\n  ts: TSCommon\r\n  compile (code: string, fileName: string, lineOffset?: number): string\r\n  getTypeInfo (code: string, fileName: string, position: number): TypeInfo\r\n}\r\n\r\n/**\r\n * Return a default temp directory based on home directory of user.\r\n */\r\nfunction getTmpDir (): string {\r\n  const hash = crypto.createHash('sha256').update(homedir(), 'utf8').digest('hex')\r\n\r\n  return join(tmpdir(), `ts-node-${hash}`)\r\n}\r\n\r\n/**\r\n * Register TypeScript compiler.\r\n */\r\nexport function register (options: Options = {}): Register {\r\n  const compiler = options.compiler || 'typescript'\r\n  const emptyFileListWarnings = [18002, 18003]\r\n  const ignoreWarnings = arrify(\r\n    options.ignoreWarnings || DEFAULTS.ignoreWarnings || []\r\n  ).concat(emptyFileListWarnings).map(Number)\r\n  const getFile = options.getFile || DEFAULTS.getFile\r\n  const fileExists = options.fileExists || DEFAULTS.fileExists\r\n  const shouldCache = !!(options.cache == null ? DEFAULTS.cache : options.cache)\r\n  const typeCheck = !!(options.typeCheck == null ? DEFAULTS.typeCheck : options.typeCheck)\r\n  const project = options.project || DEFAULTS.project\r\n  const cacheDirectory = options.cacheDirectory || DEFAULTS.cacheDirectory || getTmpDir()\r\n  const compilerOptions = Object.assign({}, DEFAULTS.compilerOptions, options.compilerOptions)\r\n  const originalJsHandler = require.extensions['.js']\r\n\r\n  const cache: Cache = {\r\n    contents: Object.create(null),\r\n    versions: Object.create(null),\r\n    outputs: Object.create(null)\r\n  }\r\n\r\n  const ignore = arrify(\r\n    (\r\n      typeof options.ignore === 'boolean' ?\r\n        (options.ignore === false ? [] : undefined) :\r\n        (options.ignore || DEFAULTS.ignore)\r\n    ) ||\r\n    ['/node_modules/']\r\n  ).map(str => new RegExp(str))\r\n\r\n  // Install source map support and read from cache.\r\n  sourceMapSupport.install({\r\n    environment: 'node',\r\n    retrieveFile (path: string) {\r\n      return cache.outputs[path]\r\n    }\r\n  })\r\n\r\n  // Require the TypeScript compiler and configuration.\r\n  const cwd = process.cwd()\r\n  const ts: typeof TS = require(compiler)\r\n  const config = readConfig(compilerOptions, project, cwd, ts)\r\n  const configDiagnostics = filterDiagnostics(config.errors, ignoreWarnings)\r\n  const extensions = ['.ts', '.tsx']\r\n\r\n  const cachedir = join(\r\n    resolve(cwd, cacheDirectory),\r\n    getCompilerDigest({ version: ts.version, typeCheck, ignoreWarnings, config, compiler })\r\n  )\r\n\r\n  // Render the configuration errors and exit the script.\r\n  if (configDiagnostics.length) {\r\n    throw new TSError(formatDiagnostics(configDiagnostics, cwd, ts, 0))\r\n  }\r\n\r\n  // Enable `allowJs` when flag is set.\r\n  if (config.options.allowJs) {\r\n    extensions.push('.js')\r\n    extensions.push('.jsx')\r\n  }\r\n\r\n  // Add all files into the file hash.\r\n  for (const fileName of config.fileNames) {\r\n    if (/\\.d\\.ts$/.test(fileName)) {\r\n      cache.versions[fileName] = 1\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the extension for a transpiled file.\r\n   */\r\n  function getExtension (fileName: string) {\r\n    const ext = extname(fileName)\r\n\r\n    if (config.options.jsx === ts.JsxEmit.Preserve && (ext === '.tsx' || ext === '.jsx')) {\r\n      return '.jsx'\r\n    }\r\n\r\n    return '.js'\r\n  }\r\n\r\n  /**\r\n   * Create the basic required function using transpile mode.\r\n   */\r\n  let getOutput = function (code: string, fileName: string, lineOffset = 0): SourceOutput {\r\n    const result = ts.transpileModule(code, {\r\n      fileName,\r\n      compilerOptions: config.options,\r\n      reportDiagnostics: true,\r\n      transformers: options.transformers\r\n    })\r\n\r\n    const diagnosticList = result.diagnostics ?\r\n      filterDiagnostics(result.diagnostics, ignoreWarnings) :\r\n      []\r\n\r\n    if (diagnosticList.length) {\r\n      throw new TSError(formatDiagnostics(diagnosticList, cwd, ts, lineOffset))\r\n    }\r\n\r\n    return [result.outputText, result.sourceMapText as string]\r\n  }\r\n\r\n  let compile = readThrough(\r\n    cachedir,\r\n    shouldCache,\r\n    getFile,\r\n    cache,\r\n    getOutput,\r\n    getExtension\r\n  )\r\n\r\n  let getTypeInfo = function (_code: string, _fileName: string, _position: number): TypeInfo {\r\n    throw new TypeError(`Type information is unavailable without \"--type-check\"`)\r\n  }\r\n\r\n  // Use full language services when the fast option is disabled.\r\n  if (typeCheck) {\r\n    // Set the file contents into cache.\r\n    const setCache = function (code: string, fileName: string) {\r\n      cache.contents[fileName] = code\r\n      cache.versions[fileName] = (cache.versions[fileName] + 1) || 1\r\n    }\r\n\r\n    // Create the compiler host for type checking.\r\n    const serviceHost = {\r\n      getScriptFileNames: () => Object.keys(cache.versions),\r\n      getScriptVersion: (fileName: string) => String(cache.versions[fileName]),\r\n      getScriptSnapshot (fileName: string) {\r\n        if (!cache.contents[fileName]) {\r\n          if (!fileExists(fileName)) {\r\n            return undefined\r\n          }\r\n\r\n          cache.contents[fileName] = getFile(fileName)\r\n        }\r\n\r\n        return ts.ScriptSnapshot.fromString(cache.contents[fileName])\r\n      },\r\n      fileExists: debugFn('fileExists', fileExists),\r\n      readFile: debugFn('getFile', getFile),\r\n      readDirectory: debugFn('readDirectory', ts.sys.readDirectory),\r\n      getDirectories: debugFn('getDirectories', ts.sys.getDirectories),\r\n      directoryExists: debugFn('directoryExists', ts.sys.directoryExists),\r\n      getNewLine: () => EOL,\r\n      getCurrentDirectory: () => cwd,\r\n      getCompilationSettings: () => config.options,\r\n      getDefaultLibFileName: () => ts.getDefaultLibFilePath(config.options),\r\n      getCustomTransformers: () => options.transformers\r\n    }\r\n\r\n    const service = ts.createLanguageService(serviceHost)\r\n\r\n    getOutput = function (_code: string, fileName: string, lineOffset: number = 0) {\r\n      const output = service.getEmitOutput(fileName)\r\n\r\n      // Get the relevant diagnostics - this is 3x faster than `getPreEmitDiagnostics`.\r\n      const diagnostics = service.getCompilerOptionsDiagnostics()\r\n        .concat(service.getSyntacticDiagnostics(fileName))\r\n        .concat(service.getSemanticDiagnostics(fileName))\r\n\r\n      const diagnosticList = filterDiagnostics(diagnostics, ignoreWarnings)\r\n\r\n      if (diagnosticList.length) {\r\n        throw new TSError(formatDiagnostics(diagnosticList, cwd, ts, lineOffset))\r\n      }\r\n\r\n      if (output.emitSkipped) {\r\n        throw new TypeError(`${relative(cwd, fileName)}: Emit skipped`)\r\n      }\r\n\r\n      // Throw an error when requiring `.d.ts` files.\r\n      if (output.outputFiles.length === 0) {\r\n        throw new TypeError(\r\n          'Unable to require `.d.ts` file.\\n' +\r\n          'This is usually the result of a faulty configuration or import. ' +\r\n          'Make sure there is a `.js`, `.json` or another executable extension and ' +\r\n          'loader (attached before `ts-node`) available alongside ' +\r\n          `\\`${basename(fileName)}\\`.`\r\n        )\r\n      }\r\n\r\n      return [output.outputFiles[1].text, output.outputFiles[0].text]\r\n    }\r\n\r\n    compile = readThrough(\r\n      cachedir,\r\n      shouldCache,\r\n      getFile,\r\n      cache,\r\n      function (code: string, fileName: string, lineOffset?: number) {\r\n        setCache(code, fileName)\r\n\r\n        return getOutput(code, fileName, lineOffset)\r\n      },\r\n      getExtension\r\n    )\r\n\r\n    getTypeInfo = function (code: string, fileName: string, position: number) {\r\n      setCache(code, fileName)\r\n\r\n      const info = service.getQuickInfoAtPosition(fileName, position)\r\n      const name = ts.displayPartsToString(info ? info.displayParts : [])\r\n      const comment = ts.displayPartsToString(info ? info.documentation : [])\r\n\r\n      return { name, comment }\r\n    }\r\n  }\r\n\r\n  const register: Register = { cwd, compile, getTypeInfo, extensions, cachedir, ts }\r\n\r\n  // Register the extensions.\r\n  extensions.forEach(extension => {\r\n    registerExtension(extension, ignore, register, originalJsHandler)\r\n  })\r\n\r\n  return register\r\n}\r\n\r\n/**\r\n * Check if the filename should be ignored.\r\n */\r\nfunction shouldIgnore (filename: string, ignore: RegExp[]) {\r\n  const relname = normalizeSlashes(filename)\r\n\r\n  return ignore.some(x => x.test(relname))\r\n}\r\n\r\n/**\r\n * Register the extension for node.\r\n */\r\nfunction registerExtension (\r\n  ext: string,\r\n  ignore: RegExp[],\r\n  register: Register,\r\n  originalHandler: (m: NodeModule, filename: string) => any\r\n) {\r\n  const old = require.extensions[ext] || originalHandler\r\n\r\n  require.extensions[ext] = function (m: any, filename) {\r\n    if (shouldIgnore(filename, ignore)) {\r\n      return old(m, filename)\r\n    }\r\n\r\n    const _compile = m._compile\r\n\r\n    m._compile = function (code: string, fileName: string) {\r\n      debug('module._compile', fileName)\r\n\r\n      return _compile.call(this, register.compile(code, fileName), fileName)\r\n    }\r\n\r\n    return old(m, filename)\r\n  }\r\n}\r\n\r\n/**\r\n * Do post-processing on config options to correct them.\r\n */\r\nfunction fixConfig (config: any, ts: TSCommon) {\r\n  // Delete options that *should not* be passed through.\r\n  delete config.options.out\r\n  delete config.options.outFile\r\n  delete config.options.declarationDir\r\n\r\n  // Target ES5 output by default (instead of ES3).\r\n  if (config.options.target === undefined) {\r\n    config.options.target = ts.ScriptTarget.ES5\r\n  }\r\n\r\n  // Target CommonJS modules by default (instead of magically switching to ES6 when the target is ES6).\r\n  if (config.options.module === undefined) {\r\n    config.options.module = ts.ModuleKind.CommonJS\r\n  }\r\n\r\n  return config\r\n}\r\n\r\n/**\r\n * Load TypeScript configuration.\r\n */\r\nfunction readConfig (compilerOptions: any, project: string | boolean | undefined, cwd: string, ts: TSCommon) {\r\n  const result = loadSync(cwd, typeof project === 'string' ? project : undefined)\r\n\r\n  // Override default configuration options.\r\n  result.config.compilerOptions = Object.assign({}, result.config.compilerOptions, compilerOptions, {\r\n    sourceMap: true,\r\n    inlineSourceMap: false,\r\n    inlineSources: true,\r\n    declaration: false,\r\n    noEmit: false,\r\n    outDir: '$$ts-node$$'\r\n  })\r\n\r\n  const configPath = result.path && normalizeSlashes(result.path)\r\n  const basePath = configPath ? dirname(configPath) : normalizeSlashes(cwd)\r\n\r\n  if (typeof ts.parseConfigFile === 'function') {\r\n    return fixConfig(ts.parseConfigFile(result.config, ts.sys, basePath), ts)\r\n  }\r\n\r\n  if (typeof ts.parseJsonConfigFileContent === 'function') {\r\n    return fixConfig(ts.parseJsonConfigFileContent(result.config, ts.sys, basePath, undefined, configPath as string), ts)\r\n  }\r\n\r\n  throw new TypeError('Could not find a compatible `parseConfigFile` function')\r\n}\r\n\r\n/**\r\n * Internal source output.\r\n */\r\ntype SourceOutput = [string, string]\r\n\r\n/**\r\n * Wrap the function with caching.\r\n */\r\nfunction readThrough (\r\n  cachedir: string,\r\n  shouldCache: boolean,\r\n  getFile: (fileName: string) => string,\r\n  cache: Cache,\r\n  compile: (code: string, fileName: string, lineOffset?: number) => SourceOutput,\r\n  getExtension: (fileName: string) => string\r\n) {\r\n  if (shouldCache === false) {\r\n    return function (code: string, fileName: string, lineOffset?: number) {\r\n      debug('readThrough', fileName)\r\n\r\n      const [value, sourceMap] = compile(code, fileName, lineOffset)\r\n      const output = updateOutput(value, fileName, sourceMap, getExtension)\r\n\r\n      cache.outputs[fileName] = output\r\n\r\n      return output\r\n    }\r\n  }\r\n\r\n  // Make sure the cache directory exists before continuing.\r\n  mkdirp.sync(cachedir)\r\n\r\n  return function (code: string, fileName: string, lineOffset?: number) {\r\n    debug('readThrough', fileName)\r\n\r\n    const cachePath = join(cachedir, getCacheName(code, fileName))\r\n    const extension = getExtension(fileName)\r\n    const outputPath = `${cachePath}${extension}`\r\n\r\n    try {\r\n      const output = getFile(outputPath)\r\n      if (isValidCacheContent(output)) {\r\n        cache.outputs[fileName] = output\r\n        return output\r\n      }\r\n    } catch (err) {/* Ignore. */}\r\n\r\n    const [value, sourceMap] = compile(code, fileName, lineOffset)\r\n    const output = updateOutput(value, fileName, sourceMap, getExtension)\r\n\r\n    cache.outputs[fileName] = output\r\n    writeFileSync(outputPath, output)\r\n\r\n    return output\r\n  }\r\n}\r\n\r\n/**\r\n * Update the output remapping the source map.\r\n */\r\nfunction updateOutput (outputText: string, fileName: string, sourceMap: string, getExtension: (fileName: string) => string) {\r\n  const base64Map = new Buffer(updateSourceMap(sourceMap, fileName), 'utf8').toString('base64')\r\n  const sourceMapContent = `data:application/json;charset=utf-8;base64,${base64Map}`\r\n  const sourceMapLength = `${basename(fileName)}.map`.length + (getExtension(fileName).length - extname(fileName).length)\r\n\r\n  return outputText.slice(0, -1 * sourceMapLength) + sourceMapContent\r\n}\r\n\r\n/**\r\n * Update the source map contents for improved output.\r\n */\r\nfunction updateSourceMap (sourceMapText: string, fileName: string) {\r\n  const sourceMap = JSON.parse(sourceMapText)\r\n  sourceMap.file = fileName\r\n  sourceMap.sources = [fileName]\r\n  delete sourceMap.sourceRoot\r\n  return JSON.stringify(sourceMap)\r\n}\r\n\r\n/**\r\n * Get the file name for the cache entry.\r\n */\r\nfunction getCacheName (sourceCode: string, fileName: string) {\r\n  return crypto.createHash('sha256')\r\n    .update(extname(fileName), 'utf8')\r\n    .update('\\x001\\x00', 'utf8') // Store \"cache version\" in hash.\r\n    .update(sourceCode, 'utf8')\r\n    .digest('hex')\r\n}\r\n\r\n/**\r\n * Ensure the given cached content is valid by sniffing for a base64 encoded '}'\r\n * at the end of the content, which should exist if there is a valid sourceMap present.\r\n */\r\nfunction isValidCacheContent (content: string) {\r\n  return /(?:9|0=|Q==)$/.test(content.slice(-3))\r\n}\r\n\r\n/**\r\n * Create a hash of the current configuration.\r\n */\r\nfunction getCompilerDigest (opts: any) {\r\n  return crypto.createHash('sha256').update(JSON.stringify(opts), 'utf8').digest('hex')\r\n}\r\n\r\n/**\r\n * Check if the file exists.\r\n */\r\nexport function fileExists (fileName: string): boolean {\r\n  try {\r\n    const stats = statSync(fileName)\r\n\r\n    return stats.isFile() || stats.isFIFO()\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Get the file from the file system.\r\n */\r\nexport function getFile (fileName: string): string {\r\n  return readFileSync(fileName, 'utf8')\r\n}\r\n\r\n/**\r\n * Filter diagnostics.\r\n */\r\nfunction filterDiagnostics (diagnostics: TS.Diagnostic[], ignore: number[]) {\r\n  return diagnostics.filter(x => ignore.indexOf(x.code) === -1)\r\n}\r\n\r\n/**\r\n * Format an array of diagnostics.\r\n */\r\nexport function formatDiagnostics (diagnostics: TS.Diagnostic[], cwd: string, ts: TSCommon, lineOffset: number) {\r\n  return diagnostics.map(x => formatDiagnostic(x, cwd, ts, lineOffset))\r\n}\r\n\r\n/**\r\n * Internal diagnostic representation.\r\n */\r\nexport interface TSDiagnostic {\r\n  message: string\r\n  code: number\r\n}\r\n\r\n/**\r\n * Format a diagnostic object into a string.\r\n */\r\nexport function formatDiagnostic (\r\n  diagnostic: TS.Diagnostic,\r\n  cwd: string,\r\n  ts: TSCommon,\r\n  lineOffset: number\r\n): TSDiagnostic {\r\n  const messageText = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')\r\n  const { code } = diagnostic\r\n\r\n  if (diagnostic.file) {\r\n    const path = relative(cwd, diagnostic.file.fileName)\r\n\r\n    if (diagnostic.start) {\r\n      const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start)\r\n      const message = `${path} (${line + 1 + lineOffset},${character + 1}): ${messageText} (${code})`\r\n\r\n      return { message, code }\r\n    }\r\n\r\n    return { message: `${path}: ${messageText} (${code})`, code }\r\n  }\r\n\r\n  return { message: `${messageText} (${code})`, code }\r\n}\r\n\r\n/**\r\n * Stringify the `TSError` instance.\r\n */\r\nexport function printError (error: TSError) {\r\n  const title = `${chalk.red('⨯')} Unable to compile TypeScript`\r\n\r\n  return `${chalk.bold(title)}\\n${error.diagnostics.map(x => x.message).join('\\n')}`\r\n}\r\n"]}