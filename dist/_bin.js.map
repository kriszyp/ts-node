{"version":3,"file":"_bin.js","sourceRoot":"","sources":["../src/_bin.ts"],"names":[],"mappings":"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","sourcesContent":["import { join, resolve } from 'path'\r\nimport { start, Recoverable } from 'repl'\r\nimport { inspect } from 'util'\r\nimport arrify = require('arrify')\r\nimport Module = require('module')\r\nimport minimist = require('minimist')\r\nimport chalk = require('chalk')\r\nimport { diffLines } from 'diff'\r\nimport { Script } from 'vm'\r\nimport { register, VERSION, getFile, fileExists, TSError, parse, printError } from './index'\r\n\r\ninterface Argv {\r\n  eval?: string\r\n  print?: string\r\n  typeCheck?: boolean\r\n  cache?: boolean\r\n  cacheDirectory?: string\r\n  version?: boolean\r\n  help?: boolean\r\n  compiler?: string\r\n  project?: string\r\n  require?: string | string[]\r\n  ignore?: boolean | string | string[]\r\n  ignoreWarnings?: string | string[]\r\n  compilerOptions?: any\r\n  _: string[]\r\n}\r\n\r\nconst strings = ['eval', 'print', 'compiler', 'project', 'ignoreWarnings', 'require', 'cacheDirectory', 'ignore']\r\nconst booleans = ['help', 'typeCheck', 'version', 'cache']\r\n\r\nconst aliases: { [key: string]: string[] } = {\r\n  help: ['h'],\r\n  version: ['v'],\r\n  eval: ['e'],\r\n  print: ['p'],\r\n  project: ['P'],\r\n  compiler: ['C'],\r\n  require: ['r'],\r\n  typeCheck: ['type-check'],\r\n  cacheDirectory: ['cache-directory'],\r\n  ignoreWarnings: ['I', 'ignore-warnings'],\r\n  compilerOptions: ['O', 'compiler-options']\r\n}\r\n\r\nlet stop = process.argv.length\r\n\r\nfunction isFlagOnly (arg: string) {\r\n  const name = arg.replace(/^--?/, '')\r\n\r\n  // The value is part of this argument.\r\n  if (/=/.test(name) || /^--no-/.test(arg)) {\r\n    return true\r\n  }\r\n\r\n  for (const bool of booleans) {\r\n    if (name === bool) {\r\n      return true\r\n    }\r\n\r\n    const alias = aliases[bool]\r\n\r\n    if (alias) {\r\n      for (const other of alias) {\r\n        if (other === name) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n// Hack around known subarg issue with `stopEarly`.\r\nfor (let i = 2; i < process.argv.length; i++) {\r\n  const arg = process.argv[i]\r\n  const next = process.argv[i + 1]\r\n\r\n  if (/^\\[/.test(arg) || /\\]$/.test(arg)) {\r\n    continue\r\n  }\r\n\r\n  if (/^-/.test(arg)) {\r\n    // Skip next argument.\r\n    if (!isFlagOnly(arg) && !/^-/.test(next)) {\r\n      i++\r\n    }\r\n\r\n    continue\r\n  }\r\n\r\n  stop = i\r\n  break\r\n}\r\n\r\nconst argv = minimist<Argv>(process.argv.slice(2, stop), {\r\n  string: strings,\r\n  boolean: booleans,\r\n  alias: aliases,\r\n  default: {\r\n    cache: null,\r\n    typeCheck: null\r\n  }\r\n})\r\n\r\nif (argv.help) {\r\n  console.log(`\r\nUsage: ts-node [options] [ -e script | script.ts ] [arguments]\r\n\r\nOptions:\r\n\r\n  -e, --eval [code]              Evaluate code\r\n  -p, --print [code]             Evaluate code and print result\r\n  -r, --require [path]           Require a node module for execution\r\n  -C, --compiler [name]          Specify a custom TypeScript compiler\r\n  -I, --ignoreWarnings [code]    Ignore TypeScript warnings by diagnostic code\r\n  -P, --project [path]           Path to TypeScript project (or \\`false\\`)\r\n  -O, --compilerOptions [opts]   JSON object to merge with compiler options\r\n  -F, --fast                     Run TypeScript compilation in transpile mode\r\n  --ignore [regexp], --no-ignore Set the ignore check (default: \\`/node_modules/\\`)\r\n  --no-cache                     Disable the TypeScript cache\r\n  --cache-directory              Configure the TypeScript cache directory\r\n`)\r\n\r\n  process.exit(0)\r\n}\r\n\r\nconst cwd = process.cwd()\r\nconst code = argv.eval === undefined ? argv.print : argv.eval\r\nconst isEvalScript = typeof argv.eval === 'string' || !!argv.print // Minimist struggles with empty strings.\r\nconst isEval = isEvalScript || stop === process.argv.length\r\nconst isPrinted = argv.print !== undefined\r\n\r\n// Register the TypeScript compiler instance.\r\nconst service = register({\r\n  typeCheck: argv.typeCheck,\r\n  cache: argv.cache,\r\n  cacheDirectory: argv.cacheDirectory,\r\n  compiler: argv.compiler,\r\n  project: argv.project,\r\n  ignore: argv.ignore,\r\n  ignoreWarnings: argv.ignoreWarnings,\r\n  compilerOptions: parse(argv.compilerOptions),\r\n  getFile: isEval ? getFileEval : getFile,\r\n  fileExists: isEval ? fileExistsEval : fileExists\r\n})\r\n\r\n// Output project information.\r\nif (argv.version) {\r\n  console.log(`ts-node v${VERSION}`)\r\n  console.log(`node ${process.version}`)\r\n  console.log(`typescript v${service.ts.version}`)\r\n  console.log(`cache ${JSON.stringify(service.cachedir)}`)\r\n  process.exit(0)\r\n}\r\n\r\n// Require specified modules before start-up.\r\n(Module as any)._preloadModules(arrify(argv.require))\r\n\r\n/**\r\n * Eval helpers.\r\n */\r\nconst EVAL_FILENAME = `[eval].ts`\r\nconst EVAL_PATH = join(cwd, EVAL_FILENAME)\r\nconst EVAL_INSTANCE = { input: '', output: '', version: 0, lines: 0 }\r\n\r\n// Execute the main contents (either eval, script or piped).\r\nif (isEvalScript) {\r\n  evalAndExit(code as string, isPrinted)\r\n} else {\r\n  if (stop < process.argv.length) {\r\n    const args = process.argv.slice(stop)\r\n    args[0] = resolve(cwd, args[0])\r\n    process.argv = ['node'].concat(args)\r\n    process.execArgv.unshift(__filename)\r\n    Module.runMain()\r\n  } else {\r\n    // Piping of execution _only_ occurs when no other script is specified.\r\n    if ((process.stdin as any).isTTY) {\r\n      startRepl()\r\n    } else {\r\n      let code = ''\r\n      process.stdin.on('data', (chunk: Buffer) => code += chunk)\r\n      process.stdin.on('end', () => evalAndExit(code, isPrinted))\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Evaluate a script.\r\n */\r\nfunction evalAndExit (code: string, isPrinted: boolean) {\r\n  const module = new Module(EVAL_FILENAME)\r\n  module.filename = EVAL_FILENAME\r\n  module.paths = (Module as any)._nodeModulePaths(cwd)\r\n\r\n  ;(global as any).__filename = EVAL_FILENAME\r\n  ;(global as any).__dirname = cwd\r\n  ;(global as any).exports = module.exports\r\n  ;(global as any).module = module\r\n  ;(global as any).require = module.require.bind(module)\r\n\r\n  let result: any\r\n\r\n  try {\r\n    result = _eval(code, global)\r\n  } catch (error) {\r\n    if (error instanceof TSError) {\r\n      console.error(printError(error))\r\n      process.exit(1)\r\n    }\r\n\r\n    throw error\r\n  }\r\n\r\n  if (isPrinted) {\r\n    console.log(typeof result === 'string' ? result : inspect(result))\r\n  }\r\n\r\n  process.exit(0)\r\n}\r\n\r\n/**\r\n * Evaluate the code snippet.\r\n */\r\nfunction _eval (input: string, context: any) {\r\n  const lines = EVAL_INSTANCE.lines\r\n  const isCompletion = !/\\n$/.test(input)\r\n  const undo = appendEval(input)\r\n  let output: string\r\n\r\n  try {\r\n    output = service.compile(EVAL_INSTANCE.input, EVAL_PATH, -lines)\r\n  } catch (err) {\r\n    undo()\r\n\r\n    throw err\r\n  }\r\n\r\n  // Use `diff` to check for new JavaScript to execute.\r\n  const changes = diffLines(EVAL_INSTANCE.output, output)\r\n\r\n  if (isCompletion) {\r\n    undo()\r\n  } else {\r\n    EVAL_INSTANCE.output = output\r\n  }\r\n\r\n  return changes.reduce((result, change) => {\r\n    return change.added ? exec(change.value, EVAL_FILENAME, context) : result\r\n  }, undefined)\r\n}\r\n\r\n/**\r\n * Execute some code.\r\n */\r\nfunction exec (code: string, filename: string, context: any) {\r\n  const script = new Script(code, { filename: filename })\r\n\r\n  return script.runInNewContext(context)\r\n}\r\n\r\n/**\r\n * Start a CLI REPL.\r\n */\r\nfunction startRepl () {\r\n  const repl = start({\r\n    prompt: '> ',\r\n    input: process.stdin,\r\n    output: process.stdout,\r\n    eval: replEval,\r\n    useGlobal: false\r\n  })\r\n\r\n  // Bookmark the point where we should reset the REPL state.\r\n  const resetEval = appendEval('')\r\n\r\n  function reset () {\r\n    resetEval()\r\n\r\n    // Hard fix for TypeScript forcing `Object.defineProperty(exports, ...)`.\r\n    exec('exports = module.exports', EVAL_FILENAME, (repl as any).context)\r\n  }\r\n\r\n  reset()\r\n  repl.on('reset', reset)\r\n\r\n  repl.defineCommand('type', {\r\n    help: 'Check the type of a TypeScript identifier',\r\n    action: function (identifier: string) {\r\n      if (!identifier) {\r\n        repl.displayPrompt()\r\n        return\r\n      }\r\n\r\n      const undo = appendEval(identifier)\r\n      const { name, comment } = service.getTypeInfo(EVAL_INSTANCE.input, EVAL_PATH, EVAL_INSTANCE.input.length)\r\n\r\n      undo()\r\n\r\n      repl.outputStream.write(`${chalk.bold(name)}\\n${comment ? `${comment}\\n` : ''}`)\r\n      repl.displayPrompt()\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Eval code from the REPL.\r\n */\r\nfunction replEval (code: string, context: any, _filename: string, callback: (err?: Error, result?: any) => any) {\r\n  let err: any\r\n  let result: any\r\n\r\n  // TODO: Figure out how to handle completion here.\r\n  if (code === '.scope') {\r\n    callback()\r\n    return\r\n  }\r\n\r\n  try {\r\n    result = _eval(code, context)\r\n  } catch (error) {\r\n    if (error instanceof TSError) {\r\n      // Support recoverable compilations using >= node 6.\r\n      if (Recoverable && isRecoverable(error)) {\r\n        err = new Recoverable(error)\r\n      } else {\r\n        err = printError(error)\r\n      }\r\n    } else {\r\n      err = error\r\n    }\r\n  }\r\n\r\n  callback(err, result)\r\n}\r\n\r\n/**\r\n * Append to the eval instance and return an undo function.\r\n */\r\nfunction appendEval (input: string) {\r\n  const undoInput = EVAL_INSTANCE.input\r\n  const undoVersion = EVAL_INSTANCE.version\r\n  const undoOutput = EVAL_INSTANCE.output\r\n  const undoLines = EVAL_INSTANCE.lines\r\n\r\n  // Handle ASI issues with TypeScript re-evaluation.\r\n  if (undoInput.charAt(undoInput.length - 1) === '\\n' && /^\\s*[\\[\\(\\`]/.test(input) && !/;\\s*$/.test(undoInput)) {\r\n    EVAL_INSTANCE.input = `${EVAL_INSTANCE.input.slice(0, -1)};\\n`\r\n  }\r\n\r\n  EVAL_INSTANCE.input += input\r\n  EVAL_INSTANCE.lines += lineCount(input)\r\n  EVAL_INSTANCE.version++\r\n\r\n  return function () {\r\n    EVAL_INSTANCE.input = undoInput\r\n    EVAL_INSTANCE.output = undoOutput\r\n    EVAL_INSTANCE.version = undoVersion\r\n    EVAL_INSTANCE.lines = undoLines\r\n  }\r\n}\r\n\r\n/**\r\n * Count the number of lines.\r\n */\r\nfunction lineCount (value: string) {\r\n  let count = 0\r\n\r\n  for (const char of value) {\r\n    if (char === '\\n') {\r\n      count++\r\n    }\r\n  }\r\n\r\n  return count\r\n}\r\n\r\n/**\r\n * Get the file text, checking for eval first.\r\n */\r\nfunction getFileEval (path: string) {\r\n  return path === EVAL_PATH ? EVAL_INSTANCE.input : getFile(path)\r\n}\r\n\r\n/**\r\n * Get whether the file exists.\r\n */\r\nfunction fileExistsEval (path: string) {\r\n  return path === EVAL_PATH || fileExists(path)\r\n}\r\n\r\nconst RECOVERY_CODES: number[] = [\r\n  1003, // \"Identifier expected.\"\r\n  1005, // \"')' expected.\"\r\n  1109, // \"Expression expected.\"\r\n  1126, // \"Unexpected end of text.\"\r\n  1160, // \"Unterminated template literal.\"\r\n  1161 // \"Unterminated regular expression literal.\"\r\n]\r\n\r\n/**\r\n * Check if a function can recover gracefully.\r\n */\r\nfunction isRecoverable (error: TSError) {\r\n  return error.diagnostics.every(x => RECOVERY_CODES.indexOf(x.code) > -1)\r\n}\r\n"]}